"""
Embedded Python Blocks:

Each time this file is saved, GRC will instantiate the first class it finds
to get ports and parameters of your block. The arguments to __init__  will
be the parameters. All of them are required to have default values!
"""

import numpy as np
from gnuradio import gr


class blk(gr.sync_block):  # other base classes are basic_block, decim_block, interp_block

    def __init__(self, buffer_storage = 1, samplerate = 32e3, threshold = 0.5, number_dips = 148):  # only default values here
        """arguments to this function show up as parameters in GRC"""
        gr.sync_block.__init__( # initialise blocks type
            self,
            name='XC0324 Temperature Decoder',   # will show up in GRC in the block
            in_sig=[np.float32], # input data type is a float
            out_sig= None # to change
        )
        self.samplerate = samplerate
        self.threshold = threshold
        self.number_dips = number_dips
        self.buffer_storage = buffer_storage
	
    def work(self, input_items, output_items): # work function
    	in0 = input_items[0]
    	sample_decisionmaker = int(self.samplerate*0.00125) # if the time between peaks is < 1250us its a 0, if larger its a 1
    	self.buffer_storage = np.append(self.buffer_storage,in0)
    	self.buffer_storage = self.buffer_storage[-int(self.samplerate*0.19):] # whole transmission takes 200ms so get the transmisison over this period
    	risingedge = np.flatnonzero((self.buffer_storage[:-1] < self.threshold) & (self.buffer_storage[1:] > self.threshold))+1 #risingedge contains the locations of the threshold crossings
    	#print(len(risingedge))
    	if len(risingedge) > self.number_dips:
    		a = np.diff(risingedge)
    		binaryArray = np.where(a < sample_decisionmaker, 0, 1) 
    		temperatureBinary = (np.array2string(np.flip(binaryArray[16:28]), separator='')[1:-1])
    		temperatureInteger = int(temperatureBinary,2)/10 - 40
    		print('The current temperature is: ', temperatureInteger)
    	
    	return len(input_items[0])
